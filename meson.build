project('lubeck', 'd', 'c', version : '1.0.0', license: 'BSL-1.0')

mir_algorithm_dep = dependency('mir-algorithm', fallback : ['mir-algorithm', 'mir_algorithm_dep'])
mir_random_dep = dependency('mir-random', fallback : ['mir-random', 'mir_random_dep'])
cblas_d_dep = dependency('cblas-d', fallback : ['cblas', 'cblas_dep'])
mir_blas_dep = dependency('mir-blas', fallback : ['mir-blas', 'mir_blas_dep'])
mir_lapack_dep = dependency('mir-lapack', fallback : ['mir-lapack', 'mir_lapack_dep'])
lapack_dep = dependency('lapack', fallback : ['lapack', 'lapack_dep'])
cc = meson.get_compiler('c')
lapack_deps = []
if not cc.find_library('openblas', required : false).found()
    lapack_deps = [cc.find_library('lapack')]
endif

required_deps = [cblas_d_dep, lapack_deps, lapack_dep, mir_algorithm_dep, mir_random_dep, mir_blas_dep, mir_lapack_dep]

lubeck_dir = include_directories('source/')

lubeck_src = [
    'source/lubeck.d',
]

lubeck_lib = library(meson.project_name(),
    lubeck_src,
    include_directories: lubeck_dir,
    install: true,
    version: meson.project_version(),
    dependencies: required_deps,
)

lubeck_dep = declare_dependency(
    link_with: [lubeck_lib],
    include_directories: lubeck_dir,
    dependencies: required_deps,
)

lubeck_test_exe = executable(meson.project_name() + '-test',
    lubeck_src,
    include_directories: lubeck_dir,
    d_unittest: true,
    d_module_versions: ['mir_test'],
    link_args: '-main',
    dependencies: required_deps,
)

install_subdir('source/',
    strip_directory : true,
    install_dir: 'include/d/' + meson.project_name(),
)

import('pkgconfig').generate(
    name: meson.project_name(),
    description: 'Optimisation Framework',
    subdirs: 'd/' + meson.project_name(),
    libraries: [lubeck_lib],
    version: meson.project_version(),
)

test(meson.project_name() + '-test', lubeck_test_exe)
